generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
    schemas   = ["app"]
}
model App {
    id String @id

    type      Int
    name      String?
    icon      String?
    metadata  Json?
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    instances      AppInstance[]
    threadSettings AppThreadSettings?
    filesSettings  AppFileSettings?
    pagesSettings  AppPageSettings[]
    formsSettings  AppFormSettings[]

    @@schema("app")
}

model AppInstance {
    id String @id

    name      String?
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String

    appThreadData AppThread[]
    AppFileData   AppFile[]
    AppPageData   AppPage[]
    AppFormData   AppForm[]

    @@schema("app")
}

model AppFile {
    id String @id

    enable    Boolean
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    appInstance   AppInstance? @relation(fields: [appInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appInstanceId String?

    @@schema("app")
}

model AppFileSettings {
    id String @id

    enable    Boolean
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String @unique

    @@schema("app")
}

model AppForm {
    id String @id

    name      String
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    appInstance   AppInstance? @relation(fields: [appInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appInstanceId String?

    @@schema("app")
}

model AppFormSettings {
    id String @id

    name       String
    fields     Json[]
    fieldCount Int?
    createdAt  DateTime? @default(now())
    updatedAt  DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String

    @@schema("app")
}

model AppPage {
    id String @id

    name      String
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    appInstance   AppInstance? @relation(fields: [appInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appInstanceId String?

    @@schema("app")
}

model AppPageSettings {
    id String @id

    name       String
    entryPoint Boolean
    content    String
    createdAt  DateTime? @default(now())
    updatedAt  DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String

    @@schema("app")
}

model AppThread {
    id Int @id @default(autoincrement())

    type      Int
    message   String
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    appInstance   AppInstance? @relation(fields: [appInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appInstanceId String?

    @@schema("app")
}

model AppThreadSettings {
    id String @id

    createdAt DateTime? @default(now())
    updatedAt DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String @unique

    @@schema("app")
}

