generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model App {
  id String @id

  type      Int
  name      String?
  icon      String?
  metadata  Json?
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  instances      AppInstance[]
  threadSettings AppThreadSettings?
  filesSettings  AppFileSettings?
  pagesSettings  AppPageSettings[]
  formsSettings  AppFormSettings[]
}

model AppInstance {
  id String @id

  name      String?
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appId String

  appThreadData AppThread[]
  AppFileData   AppFile[]
  AppPageData   AppPage[]
  AppFormData   AppForm[]
}

model AppFile {
  id String @id

  enable    Boolean
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  appInstance   AppInstance? @relation(fields: [appInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appInstanceId String?
}

model AppFileSettings {
  id String @id

  enable    Boolean
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appId String @unique
}

model AppForm {
  id String @id

  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  appInstance   AppInstance? @relation(fields: [appInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appInstanceId String?
}

model AppFormSettings {
  id String @id

  name       String
  fields     Json[]
  fieldCount Int?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?

  app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appId String
}

model AppPage {
  id String @id

  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  appInstance   AppInstance? @relation(fields: [appInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appInstanceId String?
}

model AppPageSettings {
  id String @id

  name       String
  entryPoint Boolean
  content    String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?

  app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appId String
}

model AppThread {
  id String @id

  type      Int
  message   String
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  appInstance   AppInstance? @relation(fields: [appInstanceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appInstanceId String?
}

model AppThreadSettings {
  id String @id

  createdAt DateTime? @default(now())
  updatedAt DateTime?

  app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appId String @unique
}
