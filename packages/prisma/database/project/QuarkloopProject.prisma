generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider  = "postgresql"
    url       = env("PG_QUARKLOOP_PROJECT_URL") // uses connection pooling
    directUrl = env("PG_QUARKLOOP_PROJECT_URL_NON_POOLING") // used for migrations
    schemas   = ["project"]
}

model TableBranch {
    // id
    id        String @id
    projectId String

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    tables         Table[]
    documentTables TableDocument[]
    formTables     TableForm[]
    paymentTables  TablePayment[]

    @@index([projectId])
    @@index([createdBy, updatedBy])
    @@schema("project")
}

model Table {
    // id
    id        Int    @id @default(autoincrement())
    projectId String
    branchId  String

    // table
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    documents TableDocument[]
    payments  TablePayment[]
    forms     TableForm[]
    branch    TableBranch     @relation(fields: [branchId], references: [id])

    @@index([projectId])
    @@index([createdBy, updatedBy])
    @@schema("project")
}

model TableDocumentSchema {
    // id
    id        Int    @id @default(autoincrement())
    projectId String

    // schema
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    documents TableDocument[]

    @@index([projectId])
    @@index([createdBy, updatedBy])
    @@schema("project")
}

model TableDocument {
    // id
    id        Int    @id @default(autoincrement())
    projectId String
    branchId  String
    tableId   Int
    schemaId  Int

    // document
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    table  Table               @relation(fields: [tableId], references: [id])
    branch TableBranch         @relation(fields: [branchId], references: [id])
    schema TableDocumentSchema @relation(fields: [schemaId], references: [id])

    @@index([projectId])
    @@index([createdBy, updatedBy])
    @@schema("project")
}

model TablePaymentSchema {
    // id
    id        Int    @id @default(autoincrement())
    projectId String

    // schema
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    payments TablePayment[]

    @@index([projectId])
    @@index([createdBy, updatedBy])
    @@schema("project")
}

model TablePayment {
    // id
    id        Int    @id @default(autoincrement())
    projectId String
    branchId  String
    tableId   Int
    schemaId  Int

    // payment
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    table  Table              @relation(fields: [tableId], references: [id])
    branch TableBranch        @relation(fields: [branchId], references: [id])
    schema TablePaymentSchema @relation(fields: [schemaId], references: [id])

    @@index([projectId])
    @@index([createdBy, updatedBy])
    @@schema("project")
}

model TableFormSchema {
    // id
    id        Int    @id @default(autoincrement())
    projectId String

    // schema
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    forms TableForm[]

    @@index([projectId])
    @@index([createdBy, updatedBy])
    @@schema("project")
}

model TableForm {
    // id
    id        Int    @id @default(autoincrement())
    projectId String
    branchId  String
    tableId   Int
    schemaId  Int

    // form
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    table  Table           @relation(fields: [tableId], references: [id])
    branch TableBranch     @relation(fields: [branchId], references: [id])
    schema TableFormSchema @relation(fields: [schemaId], references: [id])

    @@index([projectId])
    @@index([createdBy, updatedBy])
    @@schema("project")
}

model App {
    // id
    id        Int    @id @default(autoincrement())
    projectId String

    // app
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    @@index([createdBy, updatedBy])
    @@schema("project")
}

model AppSubmission {
    // id
    id        Int    @id @default(autoincrement())
    projectId String

    // submission
    title    String
    status   Int       @default(1)
    labels   Json?
    dueDate  DateTime?
    metadata Json?
    data     Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    discussions AppDiscussion[]

    @@index([createdBy, updatedBy])
    @@schema("project")
}

model AppDiscussion {
    // id
    id           Int @id @default(autoincrement())
    submissionId Int

    // discussion
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    createdBy String
    updatedBy String?

    // relation
    submission AppSubmission @relation(fields: [submissionId], references: [id])

    @@index([createdBy, updatedBy])
    @@schema("project")
}
