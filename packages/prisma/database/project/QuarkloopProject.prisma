generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider  = "postgresql"
    url       = env("PG_QUARKLOOP_PROJECT_URL") // uses connection pooling
    directUrl = env("PG_QUARKLOOP_PROJECT_URL_NON_POOLING") // used for migrations
    schemas   = ["project"]
}

model TableBranch {
    // id
    id        Int @id @default(autoincrement())
    projectId Int

    // branch
    name        String
    description String?
    default     Boolean @default(false)

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    mainTable TableMain[]
    documents TableDocument[]
    payments  TablePayment[]
    forms     TableForm[]

    @@unique([projectId, name])
    @@index([projectId])
    @@schema("project")
}

model TableSchema {
    // id
    id        Int @id @default(autoincrement())
    projectId Int

    // schema
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    documents TableDocument[]
    payments  TablePayment[]
    forms     TableForm[]

    @@index([projectId])
    @@schema("project")
}

model TableMain {
    // id
    id        Int @id @default(autoincrement())
    projectId Int
    branchId  Int

    // main
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    documents TableDocument[]
    payments  TablePayment[]
    forms     TableForm[]
    branch    TableBranch     @relation(fields: [branchId], references: [id])

    @@index([projectId, branchId])
    @@schema("project")
}

model TableDocument {
    // id
    id        Int @id @default(autoincrement())
    projectId Int
    branchId  Int
    mainId    Int
    schemaId  Int

    // document
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    mainTable TableMain   @relation(fields: [mainId], references: [id])
    branch    TableBranch @relation(fields: [branchId], references: [id])
    schema    TableSchema @relation(fields: [schemaId], references: [id])

    @@index([projectId, branchId])
    @@index([projectId, branchId, mainId])
    @@schema("project")
}

model TablePayment {
    // id
    id        Int @id @default(autoincrement())
    projectId Int
    branchId  Int
    mainId    Int
    schemaId  Int

    // payment
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    mainTable TableMain   @relation(fields: [mainId], references: [id])
    branch    TableBranch @relation(fields: [branchId], references: [id])
    schema    TableSchema @relation(fields: [schemaId], references: [id])

    @@index([projectId, branchId])
    @@index([projectId, branchId, mainId])
    @@schema("project")
}

model TableForm {
    // id
    id        Int @id @default(autoincrement())
    projectId Int
    branchId  Int
    mainId    Int
    schemaId  Int

    // form
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    mainTable TableMain   @relation(fields: [mainId], references: [id])
    branch    TableBranch @relation(fields: [branchId], references: [id])
    schema    TableSchema @relation(fields: [schemaId], references: [id])

    @@index([projectId, branchId])
    @@index([projectId, branchId, mainId])
    @@schema("project")
}

model App {
    // id
    id        Int @id @default(autoincrement())
    projectId Int

    // app
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    @@schema("project")
}

model AppSubmission {
    // id
    id        Int @id @default(autoincrement())
    projectId Int

    // submission
    title    String
    status   Int       @default(1)
    labels   Json?
    dueDate  DateTime?
    metadata Json?
    data     Json

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    discussions AppDiscussion[]

    @@schema("project")
}

model AppDiscussion {
    // id
    id           Int @id @default(autoincrement())
    submissionId Int

    // discussion
    name        String
    description String?
    metadata    Json?
    data        Json

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    submission AppSubmission @relation(fields: [submissionId], references: [id])

    @@schema("project")
}
