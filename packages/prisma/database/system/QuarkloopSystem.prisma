generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider  = "postgresql"
    url       = env("PG_QUARKLOOP_SYSTEM_URL") // uses connection pooling
    directUrl = env("PG_QUARKLOOP_SYSTEM_URL_NON_POOLING") // used for migrations
    schemas   = ["system"]
}

model Organization {
    id String @id

    name        String
    path        String    @unique
    description String
    accessType  Int
    createdAt   DateTime? @default(now())
    updatedAt   DateTime?

    workspaces Workspace[]
    apps       Project[]

    @@schema("system")
}

model Workspace {
    id    String @id
    orgId String

    name        String
    path        String    @unique
    description String
    accessType  Int
    createdAt   DateTime? @default(now())
    updatedAt   DateTime?

    organization Organization @relation(fields: [orgId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    projects     Project[]

    @@unique(fields: [orgId, id])
    @@schema("system")
}

model Project {
    id          String @id @default(cuid())
    orgId       String
    workspaceId String

    name        String
    path        String    @unique
    description String
    accessType  Int
    metadata    Json?
    createdAt   DateTime? @default(now())
    updatedAt   DateTime?

    organization Organization        @relation(fields: [orgId], references: [id])
    workspace    Workspace           @relation(fields: [workspaceId], references: [id])
    components   ProjectService[]
    submissions  ProjectSubmission[]

    @@schema("system")
}

model ProjectService {
    id Int @id @default(autoincrement())

    name        String
    type        Int
    description String
    metadata    Json?
    data        Json
    // TODO: delete
    isBuiltin   Boolean   @default(false)
    createdAt   DateTime? @default(now())
    updatedAt   DateTime?

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    @@schema("system")
}

model ProjectSubmission {
    id        Int    @id @default(autoincrement())
    projectId String
    userId    String

    title     String
    metadata  Json?
    data      Json
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    project     Project             @relation(fields: [projectId], references: [id])
    discussions ProjectDiscussion[]
    forms       ProjectForm[]

    @@index([userId])
    @@schema("system")
}

model ProjectDiscussion {
    id           Int    @id @default(autoincrement())
    submissionId Int
    userId       String

    name      String
    metadata  Json?
    data      String
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    submission ProjectSubmission @relation(fields: [submissionId], references: [id])

    @@index([userId])
    @@schema("system")
}

model ProjectForm {
    id           Int    @id @default(autoincrement())
    submissionId Int
    userId       String

    name        String
    description String
    metadata    Json?
    data        Json
    createdAt   DateTime? @default(now())
    updatedAt   DateTime?

    submission ProjectSubmission @relation(fields: [submissionId], references: [id])

    @@index([userId])
    @@schema("system")
}
