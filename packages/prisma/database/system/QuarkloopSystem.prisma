generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider  = "postgresql"
    url       = env("PG_QUARKLOOP_SYSTEM_URL") // uses connection pooling
    directUrl = env("PG_QUARKLOOP_SYSTEM_URL_NON_POOLING") // used for migrations
    schemas   = ["system"]
}

model Organization {
    // id
    id  BigInt @id @default(autoincrement())
    sid String @unique // scoped id

    // organization
    name        String
    description String
    visibility  Int
    metadata    Json?

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    workspaces Workspace[]
    projects   Project[]
    users      User[]

    @@schema("system")
}

model Workspace {
    // id
    id    BigInt @id @default(autoincrement())
    orgId BigInt
    sid   String // scoped id

    // workspace
    name        String
    description String
    visibility  Int
    metadata    Json?

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    organization Organization @relation(fields: [orgId], references: [id])
    projects     Project[]
    users        User[]

    @@unique([orgId, sid])
    @@index([orgId])
    @@schema("system")
}

model Project {
    // id
    id          BigInt @id @default(autoincrement())
    orgId       BigInt
    workspaceId BigInt
    sid         String // scoped id

    // project
    name        String
    description String
    visibility  Int
    metadata    Json?

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    organization Organization @relation(fields: [orgId], references: [id])
    workspace    Workspace    @relation(fields: [workspaceId], references: [id])
    users        User[]

    @@unique([orgId, workspaceId, sid])
    @@index([orgId, workspaceId])
    @@index([orgId])
    @@schema("system")
}

model User {
    // id
    id          BigInt  @id @default(autoincrement())
    userId      BigInt
    orgId       BigInt
    workspaceId BigInt?
    projectId   BigInt?

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    org       Organization @relation(fields: [orgId], references: [id])
    workspace Workspace?   @relation(fields: [workspaceId], references: [id])
    project   Project?     @relation(fields: [projectId], references: [id])

    @@schema("system")
}
