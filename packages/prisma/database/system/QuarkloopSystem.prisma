generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider  = "postgresql"
    url       = env("PG_QUARKLOOP_SYSTEM_URL") // uses connection pooling
    directUrl = env("PG_QUARKLOOP_SYSTEM_URL_NON_POOLING") // used for migrations
    schemas   = ["system"]
}

model Organization {
    // id
    id  BigInt @id @default(autoincrement())
    sid String @unique // scoped id

    // organization
    name        String
    description String
    visibility  Int    @default(1)
    metadata    Json?

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    workspaces Workspace[]
    projects   Project[]
    userGroups UserGroup[]
    userRoles  UserRole[]
    users      UserAssignment[]

    @@schema("system")
}

model Workspace {
    // id
    id    BigInt @id @default(autoincrement())
    orgId BigInt
    sid   String // scoped id

    // workspace
    name        String
    description String
    visibility  Int    @default(1)
    metadata    Json?

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    organization Organization     @relation(fields: [orgId], references: [id])
    projects     Project[]
    users        UserAssignment[]

    @@unique([orgId, sid])
    @@schema("system")
}

model Project {
    // id
    id          BigInt @id @default(autoincrement())
    orgId       BigInt
    workspaceId BigInt
    sid         String // scoped id

    // project
    name        String
    description String
    visibility  Int    @default(1)
    metadata    Json?

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    organization Organization     @relation(fields: [orgId], references: [id])
    workspace    Workspace        @relation(fields: [workspaceId], references: [id])
    users        UserAssignment[]

    @@unique([orgId, workspaceId, sid])
    @@index([orgId, workspaceId])
    @@schema("system")
}

model UserAssignment {
    // id
    id          BigInt  @id @default(autoincrement())
    orgId       BigInt
    workspaceId BigInt?
    projectId   BigInt?
    userGroupId BigInt
    roleId      BigInt

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    org       Organization @relation(fields: [orgId], references: [id])
    workspace Workspace?   @relation(fields: [workspaceId], references: [id])
    project   Project?     @relation(fields: [projectId], references: [id])
    userGroup UserGroup    @relation(fields: [userGroupId], references: [id])
    role      UserRole     @relation(fields: [roleId], references: [id])

    @@index([orgId, workspaceId])
    @@index([orgId, workspaceId, projectId])
    @@index([userGroupId, roleId])
    @@schema("system")
}

model UserGroup {
    // id
    id     BigInt  @id @default(autoincrement())
    orgId  BigInt
    userId BigInt?

    // user group
    name String

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    assignments UserAssignment[]
    org         Organization     @relation(fields: [orgId], references: [id])

    @@index([userId])
    @@schema("system")
}

model UserRole {
    // id
    id    BigInt @id @default(autoincrement())
    orgId BigInt

    // role
    name String

    // history
    createdAt DateTime  @default(now())
    createdBy String
    updatedAt DateTime?
    updatedBy String?

    // relation
    org         Organization     @relation(fields: [orgId], references: [id])
    assignments UserAssignment[]
    permissions Permission[]

    @@schema("system")
}

model Permission {
    // id
    id     BigInt @id @default(autoincrement())
    roleId BigInt

    // role
    name String

    // relation
    role UserRole @relation(fields: [roleId], references: [id])

    @@schema("system")
}
