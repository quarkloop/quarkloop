generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider  = "postgresql"
    url       = env("PG_QUARKLOOP_AUTH_URL") // uses connection pooling
    directUrl = env("PG_QUARKLOOP_AUTH_URL_NON_POOLING") // used for migrations
    schemas   = ["auth"]
}

model User {
    // id
    id       BigInt  @id @default(autoincrement())
    username String? @unique

    // user
    name          String?
    email         String    @unique
    emailVerified DateTime?
    password      String?
    passwordSalt  String?
    birthdate     DateTime?
    country       String?
    image         String?
    status        Int       @default(1)

    // history
    createdAt DateTime  @default(now())
    createdBy String?
    updatedAt DateTime?
    updatedBy String?

    // relation
    accounts Account[]
    sessions Session[]

    @@schema("auth")
}

model Account {
    // id
    id                BigInt  @id @default(autoincrement())
    userId            BigInt
    id_token          String? @db.Text
    providerAccountId String

    // account
    type          String
    provider      String
    refresh_token String? @db.Text
    access_token  String? @db.Text
    expires_at    Int?
    token_type    String?
    scope         String?
    session_state String?

    // relation
    user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@schema("auth")
}

model Session {
    // id
    id     BigInt @id @default(autoincrement())
    userId BigInt

    // session
    sessionToken String   @unique
    expires      DateTime

    // relation
    user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

    @@schema("auth")
}

model VerificationToken {
    // token
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@schema("auth")
}
