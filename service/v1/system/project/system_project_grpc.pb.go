// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: system_project.proto

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	// query
	GetProjectById(ctx context.Context, in *GetProjectByIdQuery, opts ...grpc.CallOption) (*GetProjectByIdReply, error)
	GetProjectVisibilityById(ctx context.Context, in *GetProjectVisibilityByIdQuery, opts ...grpc.CallOption) (*GetProjectVisibilityByIdReply, error)
	GetProjectList(ctx context.Context, in *GetProjectListQuery, opts ...grpc.CallOption) (*GetProjectListReply, error)
	// mutation
	CreateProject(ctx context.Context, in *CreateProjectCommand, opts ...grpc.CallOption) (*CreateProjectReply, error)
	UpdateProjectById(ctx context.Context, in *UpdateProjectByIdCommand, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteProjectById(ctx context.Context, in *DeleteProjectByIdCommand, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GetProjectById(ctx context.Context, in *GetProjectByIdQuery, opts ...grpc.CallOption) (*GetProjectByIdReply, error) {
	out := new(GetProjectByIdReply)
	err := c.cc.Invoke(ctx, "/system.project.ProjectService/GetProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectVisibilityById(ctx context.Context, in *GetProjectVisibilityByIdQuery, opts ...grpc.CallOption) (*GetProjectVisibilityByIdReply, error) {
	out := new(GetProjectVisibilityByIdReply)
	err := c.cc.Invoke(ctx, "/system.project.ProjectService/GetProjectVisibilityById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectList(ctx context.Context, in *GetProjectListQuery, opts ...grpc.CallOption) (*GetProjectListReply, error) {
	out := new(GetProjectListReply)
	err := c.cc.Invoke(ctx, "/system.project.ProjectService/GetProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectCommand, opts ...grpc.CallOption) (*CreateProjectReply, error) {
	out := new(CreateProjectReply)
	err := c.cc.Invoke(ctx, "/system.project.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProjectById(ctx context.Context, in *UpdateProjectByIdCommand, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/system.project.ProjectService/UpdateProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProjectById(ctx context.Context, in *DeleteProjectByIdCommand, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/system.project.ProjectService/DeleteProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	// query
	GetProjectById(context.Context, *GetProjectByIdQuery) (*GetProjectByIdReply, error)
	GetProjectVisibilityById(context.Context, *GetProjectVisibilityByIdQuery) (*GetProjectVisibilityByIdReply, error)
	GetProjectList(context.Context, *GetProjectListQuery) (*GetProjectListReply, error)
	// mutation
	CreateProject(context.Context, *CreateProjectCommand) (*CreateProjectReply, error)
	UpdateProjectById(context.Context, *UpdateProjectByIdCommand) (*emptypb.Empty, error)
	DeleteProjectById(context.Context, *DeleteProjectByIdCommand) (*emptypb.Empty, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) GetProjectById(context.Context, *GetProjectByIdQuery) (*GetProjectByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectById not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectVisibilityById(context.Context, *GetProjectVisibilityByIdQuery) (*GetProjectVisibilityByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectVisibilityById not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectList(context.Context, *GetProjectListQuery) (*GetProjectListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectList not implemented")
}
func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectCommand) (*CreateProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProjectById(context.Context, *UpdateProjectByIdCommand) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectById not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProjectById(context.Context, *DeleteProjectByIdCommand) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectById not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_GetProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByIdQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.project.ProjectService/GetProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectById(ctx, req.(*GetProjectByIdQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectVisibilityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectVisibilityByIdQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectVisibilityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.project.ProjectService/GetProjectVisibilityById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectVisibilityById(ctx, req.(*GetProjectVisibilityByIdQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.project.ProjectService/GetProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectList(ctx, req.(*GetProjectListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.project.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectByIdCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.project.ProjectService/UpdateProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProjectById(ctx, req.(*UpdateProjectByIdCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectByIdCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.project.ProjectService/DeleteProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProjectById(ctx, req.(*DeleteProjectByIdCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "system.project.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectById",
			Handler:    _ProjectService_GetProjectById_Handler,
		},
		{
			MethodName: "GetProjectVisibilityById",
			Handler:    _ProjectService_GetProjectVisibilityById_Handler,
		},
		{
			MethodName: "GetProjectList",
			Handler:    _ProjectService_GetProjectList_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProjectById",
			Handler:    _ProjectService_UpdateProjectById_Handler,
		},
		{
			MethodName: "DeleteProjectById",
			Handler:    _ProjectService_DeleteProjectById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system_project.proto",
}
